package com.senseskill.controller;

import com.senseskill.model.QuizResult;
import com.senseskill.model.User;
import com.senseskill.repository.LearningProgressRepository;
import com.senseskill.repository.QuizResultRepository;
import com.senseskill.repository.UserRepository;
import com.senseskill.util.JwtUtil;

import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/community")
@RequiredArgsConstructor
public class CommunityController {

    @Autowired private UserRepository userRepo;
    @Autowired private LearningProgressRepository progressRepo;
    @Autowired private JwtUtil jwtUtil;
    @Autowired private QuizResultRepository quizRepo;
    
    @GetMapping("/insights")
    public ResponseEntity<?> getCommunityInsights(HttpServletRequest request) {
        // Get current user
        String token = request.getHeader("Authorization").substring(7);
        String email = jwtUtil.extractUsername(token);
        Optional<User> userOpt = userRepo.findByEmail(email);
        if (userOpt.isEmpty()) return ResponseEntity.status(401).body("Invalid user");

        User user = userOpt.get();
        QuizResult latestQuiz = quizRepo.findTopByUserOrderByTakenAtDesc(user);
        if (latestQuiz == null) {
            return ResponseEntity.badRequest().body("No quiz result found for user.");
        }

        String strength = latestQuiz.getStrength();

        List<Object[]> data = progressRepo.findPopularTopicsByStrength(strength);

        List<Map<String, Object>> result = new ArrayList<>();
        for (Object[] row : data) {
            Map<String, Object> map = new HashMap<>();
            map.put("topic", row[0]);
            map.put("count", row[1]);
            result.add(map);
        }

        return ResponseEntity.ok(Map.of(
            "strength", strength,
            "popularTopics", result
        ));
    }
}
